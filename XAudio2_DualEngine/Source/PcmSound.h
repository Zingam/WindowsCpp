#pragma once
///////////////////////////////////////////////////////////////////////////////
// C++ Library inclusions
///////////////////////////////////////////////////////////////////////////////
#include <memory>
#include <string>
#include <vector>
///////////////////////////////////////////////////////////////////////////////
// External Library inclusions
///////////////////////////////////////////////////////////////////////////////
#include "External/WaveFile/WaveFile.h"
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Forward declarations
///////////////////////////////////////////////////////////////////////////////
struct IXAudio2SourceVoice;
///////////////////////////////////////////////////////////////////////////////
class XAudio2Engine;
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Class declarations
///////////////////////////////////////////////////////////////////////////////

///
/// Wave file PCM data container
///
class PcmSound
{
public:
    PcmSound(wchar_t const* filename);
    PcmSound(PcmSound const& other) = delete;
    PcmSound(PcmSound&& other);

    ~PcmSound();

public:
    PcmSound& operator=(PcmSound const& other) = delete;
    PcmSound& operator=(PcmSound&& other);

public:
    bool IsLoaded();
    bool IsPlaying();
    void Play();
    void Attach(XAudio2Engine& xAudio2Engine);

public:
    WAVEFORMATEX* Format;
    unsigned char* WaveData;
    unsigned long WaveSize;

private:
    std::wstring m_Filename;
    CWaveFile m_Wave;
    bool m_IsLoaded;

    std::vector<IXAudio2SourceVoice*> m_SourceVoices;
};

///////////////////////////////////////////////////////////////////////////////
