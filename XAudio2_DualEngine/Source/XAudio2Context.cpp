///////////////////////////////////////////////////////////////////////////////
#include "XAudio2Context.h"
///////////////////////////////////////////////////////////////////////////////
// C++ Library inclusions
///////////////////////////////////////////////////////////////////////////////
#include <iostream>
///////////////////////////////////////////////////////////////////////////////
// System Library inclusions
///////////////////////////////////////////////////////////////////////////////
#include <xaudio2.h>
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Static members initialization
///////////////////////////////////////////////////////////////////////////////
std::unique_ptr<XAudio2Context> XAudio2Context::s_XAudio2Context;
///////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////
// Constructors
///////////////////////////////////////////////////////////////////////////////
XAudio2Context::XAudio2Context()
    : m_IsInitialized(true)
{
    if (FAILED(CoInitializeEx(NULL, COINIT_MULTITHREADED)))
    {
        std::cout << "XAudio2Context: Initialization failed" << std::endl;
        
        m_IsInitialized = false;
    }
}

///////////////////////////////////////////////////////////////////////////////
// Destructors
///////////////////////////////////////////////////////////////////////////////
XAudio2Context::~XAudio2Context()
{
    // COM objects need to be destroyed before COM gets unininitialized
    m_XAudio2Engines.clear();
    CoUninitialize();
}

///////////////////////////////////////////////////////////////////////////////
// Move Constructors
///////////////////////////////////////////////////////////////////////////////
XAudio2Context::XAudio2Context(XAudio2Context&& xAudio2Context)
{
    m_XAudio2Engines = std::move(xAudio2Context.m_XAudio2Engines);
}

///////////////////////////////////////////////////////////////////////////////
// Move assignment operators
///////////////////////////////////////////////////////////////////////////////
///
/// operator= (move assignment)
///
XAudio2Context& 
XAudio2Context::operator=(XAudio2Context&& xAudio2Context)
{
    m_XAudio2Engines = std::move(xAudio2Context.m_XAudio2Engines);

    return *this;
}

///////////////////////////////////////////////////////////////////////////////
// Static Methods
///////////////////////////////////////////////////////////////////////////////
XAudio2Context& 
XAudio2Context::CreateXAudio2Context()
{
    if (nullptr == s_XAudio2Context)
    {
        s_XAudio2Context =std::unique_ptr<XAudio2Context>(new XAudio2Context);
    }

    return *s_XAudio2Context;
}

///////////////////////////////////////////////////////////////////////////////
// Public Methods
///////////////////////////////////////////////////////////////////////////////
XAudio2Engine& 
XAudio2Context::CreateXAudio2Engine()
{
    XAudio2Engine xAudio2Engine;
    m_XAudio2Engines.push_back(std::move(xAudio2Engine));

    return m_XAudio2Engines.back();
}
